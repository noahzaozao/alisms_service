// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: alisms.proto

/*
Package alisms is a generated protocol buffer package.

It is generated from these files:
	alisms.proto

It has these top-level messages:
	SMSVerficationCodeData
	SMSVerficationCodeCheckData
	SMSVerficationQueryData
	SMSVerficationResponseData
	SMSVerficationQueryResponseData
*/
package alisms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthService service

type AuthService interface {
	SMSVerficationCode(ctx context.Context, in *SMSVerficationCodeData, opts ...client.CallOption) (*SMSVerficationResponseData, error)
	SMSVerficationCodeCheck(ctx context.Context, in *SMSVerficationCodeCheckData, opts ...client.CallOption) (*SMSVerficationResponseData, error)
	SMSVerficationQuery(ctx context.Context, in *SMSVerficationQueryData, opts ...client.CallOption) (*SMSVerficationQueryResponseData, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "alisms"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) SMSVerficationCode(ctx context.Context, in *SMSVerficationCodeData, opts ...client.CallOption) (*SMSVerficationResponseData, error) {
	req := c.c.NewRequest(c.name, "AuthService.SMSVerficationCode", in)
	out := new(SMSVerficationResponseData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) SMSVerficationCodeCheck(ctx context.Context, in *SMSVerficationCodeCheckData, opts ...client.CallOption) (*SMSVerficationResponseData, error) {
	req := c.c.NewRequest(c.name, "AuthService.SMSVerficationCodeCheck", in)
	out := new(SMSVerficationResponseData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) SMSVerficationQuery(ctx context.Context, in *SMSVerficationQueryData, opts ...client.CallOption) (*SMSVerficationQueryResponseData, error) {
	req := c.c.NewRequest(c.name, "AuthService.SMSVerficationQuery", in)
	out := new(SMSVerficationQueryResponseData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	SMSVerficationCode(context.Context, *SMSVerficationCodeData, *SMSVerficationResponseData) error
	SMSVerficationCodeCheck(context.Context, *SMSVerficationCodeCheckData, *SMSVerficationResponseData) error
	SMSVerficationQuery(context.Context, *SMSVerficationQueryData, *SMSVerficationQueryResponseData) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		SMSVerficationCode(ctx context.Context, in *SMSVerficationCodeData, out *SMSVerficationResponseData) error
		SMSVerficationCodeCheck(ctx context.Context, in *SMSVerficationCodeCheckData, out *SMSVerficationResponseData) error
		SMSVerficationQuery(ctx context.Context, in *SMSVerficationQueryData, out *SMSVerficationQueryResponseData) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) SMSVerficationCode(ctx context.Context, in *SMSVerficationCodeData, out *SMSVerficationResponseData) error {
	return h.AuthServiceHandler.SMSVerficationCode(ctx, in, out)
}

func (h *authServiceHandler) SMSVerficationCodeCheck(ctx context.Context, in *SMSVerficationCodeCheckData, out *SMSVerficationResponseData) error {
	return h.AuthServiceHandler.SMSVerficationCodeCheck(ctx, in, out)
}

func (h *authServiceHandler) SMSVerficationQuery(ctx context.Context, in *SMSVerficationQueryData, out *SMSVerficationQueryResponseData) error {
	return h.AuthServiceHandler.SMSVerficationQuery(ctx, in, out)
}
